name: Main branch workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CACHE_PATH: /tmp/.buildx-cache
  TRIVY_CACHE_PATH: /tmp/.trivy-cache
  TRIVY_IMAGE_VERSION: 0.49.1
  APP_IMAGE: romankd/revapp:${{ github.run_id }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        version: v0.13.1
    
    - name: Cleaning volumes
      run: docker volume prune -f

    - name: Cache Docker
      id: cache_docker
      if: ${{ success() }}
      uses: actions/cache@v4
      with:
        path: ${{ env.CACHE_PATH }}
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Docker image build
      if: ${{ success() }}
      run: |
        docker buildx build --load  \
          -t ${{ env.APP_IMAGE }} --cache-to=type=local,dest=${{ env.CACHE_PATH }} \
          --cache-from=type=local,src=${{ env.CACHE_PATH }} \
          -f ./containers/app/Dockerfile ./containers/app

    # - name: Docker image build
    #   if: ${{ success() }}
    #   run: |
    #     docker build  \
    #       -t ${{ env.APP_IMAGE }} \
    #       -f ./containers/app/Dockerfile ./containers/app

  security_check:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Testing the Docker image with Trivy for vulnerabilities
      if: ${{ success() }}
      run: |
        docker run --rm -v ${{ env.TRIVY_CACHE_PATH }}:/root/.cache/ \
          -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:${{ env.TRIVY_IMAGE_VERSION }} image ${{ env.APP_IMAGE }} \
          --severity HIGH,CRITICAL --exit-code 1
  
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Docker compose up
      if: ${{ success() }}
      run: |
        APP_IMAGE_TAG=${{ env.APP_IMAGE }} \
        MONGODB_LOCAL_PORT=27017 \
        MONGODB_DOCKER_PORT=27017 \
        MONGODB_DATABASE=users \
        MONGODB_USER=${{ secrets.MONGODB_USER }} \
        MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }} \
        NODE_LOCAL_PORT=3000 \
        NODE_DOCKER_PORT=3000 \
        MONGODB_ADMIN_USER=${{ secrets.MONGODB_ADMIN_USER }} \
        MONGODB_ADMIN_PASSWORD=${{ secrets.MONGODB_ADMIN_PASSWORD }} \
        docker compose -f ./containers/docker-compose.yaml up -d --no-build
    
    - name: Running tests in Docker
      if: ${{ success() }}
      run: docker exec nodeapp npm test
    
  push:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Log in to Docker Hub
      if: success()
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push the Docker image
      if: success()
      run: docker push ${{ env.APP_IMAGE }}

    - name: Stopping Docker compose
      if: ${{ success() }}
      run: |
        APP_IMAGE_TAG=${{ env.APP_IMAGE }} \
        MONGODB_LOCAL_PORT=27017 \
        MONGODB_DOCKER_PORT=27017 \
        MONGODB_DATABASE=users \
        MONGODB_USER=${{ secrets.MONGODB_USER }} \
        MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }} \
        NODE_LOCAL_PORT=3000 \
        NODE_DOCKER_PORT=3000 \
        MONGODB_ADMIN_USER=${{ secrets.MONGODB_ADMIN_USER }} \
        MONGODB_ADMIN_PASSWORD=${{ secrets.MONGODB_ADMIN_PASSWORD }} \
        docker compose -f ./containers/docker-compose.yaml down --volumes

  cleanup:
    runs-on: ubuntu-latest
    needs: push
    steps:
    - name: Cleaning volumes
      run: docker volume prune -f
    
    #Create release on success