apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
data:
  mongodb.conf: |  
    replication:
      replSetName: "rs0"
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-boot
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
immutable: true
data:
  initialization.sh: |
    #!/bin/bash
    MASTER_POD=${SERVICENAME}-0

    HOST=${HOSTNAME}.${SERVICENAME}.${NAMESPACE}.svc.cluster.local
    MASTER=${MASTER_POD}.${SERVICENAME}.${NAMESPACE}.svc.cluster.local

    until mongosh --eval 'printjson(db.serverStatus())'; do
        echo "waiting for mongo boot finish."
        sleep 1
    done

    if [[ "$HOSTNAME" -ne "$MASTER_POD" ]]; then
        until mongosh --host ${HOST} --eval 'printjson(rs.status())' 2>&1 | grep "no replset config"; do
            echo "waiting for mongo boot."
            sleep 1
        done

        until mongosh --host ${MASTER} --eval 'printjson(rs.status())' 2>&1 | grep "PRIMARY"; do
            echo "waiting for mongo master to create replicaset config."
            sleep 1
        done
        mongosh --host ${MASTER} --eval "printjson(rs.add('${HOST}'));"
    fi

    if [[ "$HOSTNAME" -eq  "$MASTER_POD" ]]; then
        echo "init resplication on primery node"
        mongosh --host ${HOST} --eval "printjson(rs.initiate({'_id': 'rs0', 'members' : [{'_id': 0, 'host' : '${HOST}'}]}));"
        mongosh $MONGO_INITDB_DATABASE --eval "db.getSiblingDB('$MONGODB_DATABASE').createUser({user:'$MONGODB_USER', pwd:'$MONGODB_PASSWORD', roles:[{role:'readWrite',db:'$MONGODB_DATABASE'}]});"
        echo "init finished, ready to accept replicas"
    fi

    echo "Done."